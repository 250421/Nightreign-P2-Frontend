/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicPublicImport } from './routes/(public)/_public'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as authAuthIndexImport } from './routes/(auth)/_auth.index'
import { Route as publicPublicRegisterImport } from './routes/(public)/_public.register'
import { Route as publicPublicLoginImport } from './routes/(public)/_public.login'
import { Route as authAuthRulesImport } from './routes/(auth)/_auth.rules'
import { Route as authAuthLobbyImport } from './routes/(auth)/_auth.lobby'
import { Route as authAuthCharacterPageImport } from './routes/(auth)/_auth.character-page'
import { Route as authAuthRoomRoomIdImport } from './routes/(auth)/_auth.room.$roomId'
import { Route as authAuthBattleRoomIdImport } from './routes/(auth)/_auth.battle.$roomId'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()
const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const publicPublicRoute = publicPublicImport.update({
  id: '/_public',
  getParentRoute: () => publicRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const authAuthIndexRoute = authAuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authAuthRoute,
} as any)

const publicPublicRegisterRoute = publicPublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicPublicRoute,
} as any)

const publicPublicLoginRoute = publicPublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicPublicRoute,
} as any)

const authAuthRulesRoute = authAuthRulesImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthLobbyRoute = authAuthLobbyImport.update({
  id: '/lobby',
  path: '/lobby',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthCharacterPageRoute = authAuthCharacterPageImport.update({
  id: '/character-page',
  path: '/character-page',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthRoomRoomIdRoute = authAuthRoomRoomIdImport.update({
  id: '/room/$roomId',
  path: '/room/$roomId',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthBattleRoomIdRoute = authAuthBattleRoomIdImport.update({
  id: '/battle/$roomId',
  path: '/battle/$roomId',
  getParentRoute: () => authAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_public': {
      id: '/(public)/_public'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicPublicImport
      parentRoute: typeof publicRoute
    }
    '/(auth)/_auth/character-page': {
      id: '/(auth)/_auth/character-page'
      path: '/character-page'
      fullPath: '/character-page'
      preLoaderRoute: typeof authAuthCharacterPageImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/lobby': {
      id: '/(auth)/_auth/lobby'
      path: '/lobby'
      fullPath: '/lobby'
      preLoaderRoute: typeof authAuthLobbyImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/rules': {
      id: '/(auth)/_auth/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof authAuthRulesImport
      parentRoute: typeof authAuthImport
    }
    '/(public)/_public/login': {
      id: '/(public)/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicPublicLoginImport
      parentRoute: typeof publicPublicImport
    }
    '/(public)/_public/register': {
      id: '/(public)/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicPublicRegisterImport
      parentRoute: typeof publicPublicImport
    }
    '/(auth)/_auth/': {
      id: '/(auth)/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthIndexImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/battle/$roomId': {
      id: '/(auth)/_auth/battle/$roomId'
      path: '/battle/$roomId'
      fullPath: '/battle/$roomId'
      preLoaderRoute: typeof authAuthBattleRoomIdImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/room/$roomId': {
      id: '/(auth)/_auth/room/$roomId'
      path: '/room/$roomId'
      fullPath: '/room/$roomId'
      preLoaderRoute: typeof authAuthRoomRoomIdImport
      parentRoute: typeof authAuthImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthCharacterPageRoute: typeof authAuthCharacterPageRoute
  authAuthLobbyRoute: typeof authAuthLobbyRoute
  authAuthRulesRoute: typeof authAuthRulesRoute
  authAuthIndexRoute: typeof authAuthIndexRoute
  authAuthBattleRoomIdRoute: typeof authAuthBattleRoomIdRoute
  authAuthRoomRoomIdRoute: typeof authAuthRoomRoomIdRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthCharacterPageRoute: authAuthCharacterPageRoute,
  authAuthLobbyRoute: authAuthLobbyRoute,
  authAuthRulesRoute: authAuthRulesRoute,
  authAuthIndexRoute: authAuthIndexRoute,
  authAuthBattleRoomIdRoute: authAuthBattleRoomIdRoute,
  authAuthRoomRoomIdRoute: authAuthRoomRoomIdRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface publicPublicRouteChildren {
  publicPublicLoginRoute: typeof publicPublicLoginRoute
  publicPublicRegisterRoute: typeof publicPublicRegisterRoute
}

const publicPublicRouteChildren: publicPublicRouteChildren = {
  publicPublicLoginRoute: publicPublicLoginRoute,
  publicPublicRegisterRoute: publicPublicRegisterRoute,
}

const publicPublicRouteWithChildren = publicPublicRoute._addFileChildren(
  publicPublicRouteChildren,
)

interface publicRouteChildren {
  publicPublicRoute: typeof publicPublicRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicPublicRoute: publicPublicRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authAuthIndexRoute
  '/character-page': typeof authAuthCharacterPageRoute
  '/lobby': typeof authAuthLobbyRoute
  '/rules': typeof authAuthRulesRoute
  '/login': typeof publicPublicLoginRoute
  '/register': typeof publicPublicRegisterRoute
  '/battle/$roomId': typeof authAuthBattleRoomIdRoute
  '/room/$roomId': typeof authAuthRoomRoomIdRoute
}

export interface FileRoutesByTo {
  '/': typeof authAuthIndexRoute
  '/character-page': typeof authAuthCharacterPageRoute
  '/lobby': typeof authAuthLobbyRoute
  '/rules': typeof authAuthRulesRoute
  '/login': typeof publicPublicLoginRoute
  '/register': typeof publicPublicRegisterRoute
  '/battle/$roomId': typeof authAuthBattleRoomIdRoute
  '/room/$roomId': typeof authAuthRoomRoomIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_public': typeof publicPublicRouteWithChildren
  '/(auth)/_auth/character-page': typeof authAuthCharacterPageRoute
  '/(auth)/_auth/lobby': typeof authAuthLobbyRoute
  '/(auth)/_auth/rules': typeof authAuthRulesRoute
  '/(public)/_public/login': typeof publicPublicLoginRoute
  '/(public)/_public/register': typeof publicPublicRegisterRoute
  '/(auth)/_auth/': typeof authAuthIndexRoute
  '/(auth)/_auth/battle/$roomId': typeof authAuthBattleRoomIdRoute
  '/(auth)/_auth/room/$roomId': typeof authAuthRoomRoomIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/character-page'
    | '/lobby'
    | '/rules'
    | '/login'
    | '/register'
    | '/battle/$roomId'
    | '/room/$roomId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/character-page'
    | '/lobby'
    | '/rules'
    | '/login'
    | '/register'
    | '/battle/$roomId'
    | '/room/$roomId'
  id:
    | '__root__'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(public)'
    | '/(public)/_public'
    | '/(auth)/_auth/character-page'
    | '/(auth)/_auth/lobby'
    | '/(auth)/_auth/rules'
    | '/(public)/_public/login'
    | '/(public)/_public/register'
    | '/(auth)/_auth/'
    | '/(auth)/_auth/battle/$roomId'
    | '/(auth)/_auth/room/$roomId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren
  publicRoute: typeof publicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  publicRoute: publicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(public)"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/character-page",
        "/(auth)/_auth/lobby",
        "/(auth)/_auth/rules",
        "/(auth)/_auth/",
        "/(auth)/_auth/battle/$roomId",
        "/(auth)/_auth/room/$roomId"
      ]
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_public"
      ]
    },
    "/(public)/_public": {
      "filePath": "(public)/_public.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_public/login",
        "/(public)/_public/register"
      ]
    },
    "/(auth)/_auth/character-page": {
      "filePath": "(auth)/_auth.character-page.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/lobby": {
      "filePath": "(auth)/_auth.lobby.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/rules": {
      "filePath": "(auth)/_auth.rules.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(public)/_public/login": {
      "filePath": "(public)/_public.login.tsx",
      "parent": "/(public)/_public"
    },
    "/(public)/_public/register": {
      "filePath": "(public)/_public.register.tsx",
      "parent": "/(public)/_public"
    },
    "/(auth)/_auth/": {
      "filePath": "(auth)/_auth.index.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/battle/$roomId": {
      "filePath": "(auth)/_auth.battle.$roomId.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/room/$roomId": {
      "filePath": "(auth)/_auth.room.$roomId.tsx",
      "parent": "/(auth)/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
